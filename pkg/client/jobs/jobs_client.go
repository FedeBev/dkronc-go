// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new jobs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for jobs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOrUpdateJob(params *CreateOrUpdateJobParams, opts ...ClientOption) (*CreateOrUpdateJobCreated, error)

	DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error)

	GetJobs(params *GetJobsParams, opts ...ClientOption) (*GetJobsOK, error)

	Restore(params *RestoreParams, opts ...ClientOption) (*RestoreOK, error)

	RunJob(params *RunJobParams, opts ...ClientOption) (*RunJobAccepted, error)

	ShowJobByName(params *ShowJobByNameParams, opts ...ClientOption) (*ShowJobByNameOK, error)

	ToggleJob(params *ToggleJobParams, opts ...ClientOption) (*ToggleJobOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateOrUpdateJob Create or updates a new job.

*/
func (a *Client) CreateOrUpdateJob(params *CreateOrUpdateJobParams, opts ...ClientOption) (*CreateOrUpdateJobCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateJob",
		Method:             "POST",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrUpdateJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateJobCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrUpdateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteJob Delete a job.

*/
func (a *Client) DeleteJob(params *DeleteJobParams, opts ...ClientOption) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteJob",
		Method:             "DELETE",
		PathPattern:        "/jobs/{job_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetJobs List jobs.

*/
func (a *Client) GetJobs(params *GetJobsParams, opts ...ClientOption) (*GetJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getJobs",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Restore Restore jobs from json file.

*/
func (a *Client) Restore(params *RestoreParams, opts ...ClientOption) (*RestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "restore",
		Method:             "POST",
		PathPattern:        "/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restore: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RunJob Executes a job.

*/
func (a *Client) RunJob(params *RunJobParams, opts ...ClientOption) (*RunJobAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "runJob",
		Method:             "POST",
		PathPattern:        "/jobs/{job_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunJobAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ShowJobByName Show a job.

*/
func (a *Client) ShowJobByName(params *ShowJobByNameParams, opts ...ClientOption) (*ShowJobByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowJobByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "showJobByName",
		Method:             "GET",
		PathPattern:        "/jobs/{job_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShowJobByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShowJobByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for showJobByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ToggleJob Toggle a job.

*/
func (a *Client) ToggleJob(params *ToggleJobParams, opts ...ClientOption) (*ToggleJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleJobParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggleJob",
		Method:             "POST",
		PathPattern:        "/jobs/{job_name}/toggle",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggleJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
