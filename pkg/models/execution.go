// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Execution An execution represents a timed job run.
//
// swagger:model execution
type Execution struct {

	// when the execution finished running
	// Format: date-time
	FinishedAt strfmt.DateTime `json:"finished_at,omitempty"`

	// job name
	// Example: job_1
	JobName string `json:"job_name,omitempty"`

	// name of the node that executed the command
	// Example: dkron1
	NodeName string `json:"node_name,omitempty"`

	// partial output of the command execution
	// Example: Hello from Dkron
	Output string `json:"output,omitempty"`

	// start time of the execution
	// Format: date-time
	StartedAt strfmt.DateTime `json:"started_at,omitempty"`

	// the execution run successfuly
	Success bool `json:"success,omitempty"`
}

// Validate validates this execution
func (m *Execution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Execution) validateFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.FinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("finished_at", "body", "date-time", m.FinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Execution) validateStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.StartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("started_at", "body", "date-time", m.StartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this execution based on context it is used
func (m *Execution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Execution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Execution) UnmarshalBinary(b []byte) error {
	var res Execution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
