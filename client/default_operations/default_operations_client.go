// Code generated by go-swagger; DO NOT EDIT.

package default_operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new default operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for default operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Busy(params *BusyParams, opts ...ClientOption) (*BusyOK, error)

	GetIsLeader(params *GetIsLeaderParams, opts ...ClientOption) (*GetIsLeaderOK, error)

	GetLeader(params *GetLeaderParams, opts ...ClientOption) (*GetLeaderOK, error)

	Leave(params *LeaveParams, opts ...ClientOption) (*LeaveOK, error)

	Status(params *StatusParams, opts ...ClientOption) (*StatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Busy Returns the running executions.

*/
func (a *Client) Busy(params *BusyParams, opts ...ClientOption) (*BusyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBusyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "busy",
		Method:             "GET",
		PathPattern:        "/busy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BusyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BusyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for busy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetIsLeader Check if node is a leader or follower.

*/
func (a *Client) GetIsLeader(params *GetIsLeaderParams, opts ...ClientOption) (*GetIsLeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIsLeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIsLeader",
		Method:             "GET",
		PathPattern:        "/isleader",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIsLeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIsLeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIsLeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetLeader List leader of cluster.

*/
func (a *Client) GetLeader(params *GetLeaderParams, opts ...ClientOption) (*GetLeaderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLeaderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLeader",
		Method:             "GET",
		PathPattern:        "/leader",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLeaderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLeaderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLeader: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Leave Force the node to leave the cluster.

*/
func (a *Client) Leave(params *LeaveParams, opts ...ClientOption) (*LeaveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLeaveParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "leave",
		Method:             "POST",
		PathPattern:        "/leave",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LeaveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LeaveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for leave: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Status Gets `Status` object.

*/
func (a *Client) Status(params *StatusParams, opts ...ClientOption) (*StatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "status",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for status: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
